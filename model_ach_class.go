/*
The Plaid API

The Plaid REST API. Please see https://plaid.com/docs/api for more details.

API version: 2020-09-14_1.64.13
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ACHClass Specifies the use case of the transfer.  Required for transfers on an ACH network. In Sandbox, only `ccd`, `ppd`, or `web` can be used.  `\"arc\"` - Accounts Receivable Entry  `\"cbr`\" - Cross Border Entry  `\"ccd\"` - Corporate Credit or Debit - fund transfer between two corporate bank accounts  `\"cie\"` - Customer Initiated Entry  `\"cor\"` - Automated Notification of Change  `\"ctx\"` - Corporate Trade Exchange  `\"iat\"` - International  `\"mte\"` - Machine Transfer Entry  `\"pbr\"` - Cross Border Entry  `\"pop\"` - Point-of-Purchase Entry  `\"pos\"` - Point-of-Sale Entry  `\"ppd\"` - Prearranged Payment or Deposit - the transfer is part of a pre-existing relationship with a consumer, eg. bill payment  `\"rck\"` - Re-presented Check Entry  `\"tel\"` - Telephone-Initiated Entry  `\"web\"` - Internet-Initiated Entry - debits from a consumerâ€™s account where their authorization is obtained over the Internet
type ACHClass string

// List of ACHClass
const (
	ARC ACHClass = "arc"
	CBR ACHClass = "cbr"
	CCD ACHClass = "ccd"
	CIE ACHClass = "cie"
	COR ACHClass = "cor"
	CTX ACHClass = "ctx"
	IAT ACHClass = "iat"
	MTE ACHClass = "mte"
	PBR ACHClass = "pbr"
	POP ACHClass = "pop"
	POS ACHClass = "pos"
	PPD ACHClass = "ppd"
	RCK ACHClass = "rck"
	TEL ACHClass = "tel"
	WEB ACHClass = "web"
)

// All allowed values of ACHClass enum
var AllowedACHClassEnumValues = []ACHClass{
	"arc",
	"cbr",
	"ccd",
	"cie",
	"cor",
	"ctx",
	"iat",
	"mte",
	"pbr",
	"pop",
	"pos",
	"ppd",
	"rck",
	"tel",
	"web",
}

func (v *ACHClass) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ACHClass(value)
	for _, existing := range AllowedACHClassEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ACHClass", value)
}

// NewACHClassFromValue returns a pointer to a valid ACHClass
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewACHClassFromValue(v string) (*ACHClass, error) {
	ev := ACHClass(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ACHClass: valid values are %v", v, AllowedACHClassEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ACHClass) IsValid() bool {
	for _, existing := range AllowedACHClassEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ACHClass value
func (v ACHClass) Ptr() *ACHClass {
	return &v
}

type NullableACHClass struct {
	value *ACHClass
	isSet bool
}

func (v NullableACHClass) Get() *ACHClass {
	return v.value
}

func (v *NullableACHClass) Set(val *ACHClass) {
	v.value = val
	v.isSet = true
}

func (v NullableACHClass) IsSet() bool {
	return v.isSet
}

func (v *NullableACHClass) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableACHClass(val *ACHClass) *NullableACHClass {
	return &NullableACHClass{value: val, isSet: true}
}

func (v NullableACHClass) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableACHClass) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

