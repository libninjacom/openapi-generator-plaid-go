/*
The Plaid API

The Plaid REST API. Please see https://plaid.com/docs/api for more details.

API version: 2020-09-14_1.64.13
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// InvestmentAccountSubtype Valid account subtypes for investment accounts. For a list containing descriptions of each subtype, see [Account schemas](https://plaid.com/docs/api/accounts/#StandaloneAccountType-investment).
type InvestmentAccountSubtype string

// List of InvestmentAccountSubtype
const (
	_529 InvestmentAccountSubtype = "529"
	_401A InvestmentAccountSubtype = "401a"
	_401K InvestmentAccountSubtype = "401k"
	_403_B InvestmentAccountSubtype = "403B"
	_457B InvestmentAccountSubtype = "457b"
	BROKERAGE InvestmentAccountSubtype = "brokerage"
	CASH_ISA InvestmentAccountSubtype = "cash isa"
	EDUCATION_SAVINGS_ACCOUNT InvestmentAccountSubtype = "education savings account"
	FIXED_ANNUITY InvestmentAccountSubtype = "fixed annuity"
	GIC InvestmentAccountSubtype = "gic"
	HEALTH_REIMBURSEMENT_ARRANGEMENT InvestmentAccountSubtype = "health reimbursement arrangement"
	HSA InvestmentAccountSubtype = "hsa"
	IRA InvestmentAccountSubtype = "ira"
	ISA InvestmentAccountSubtype = "isa"
	KEOGH InvestmentAccountSubtype = "keogh"
	LIF InvestmentAccountSubtype = "lif"
	LIFE_INSURANCE InvestmentAccountSubtype = "life insurance"
	LIRA InvestmentAccountSubtype = "lira"
	LRIF InvestmentAccountSubtype = "lrif"
	LRSP InvestmentAccountSubtype = "lrsp"
	MUTUAL_FUND InvestmentAccountSubtype = "mutual fund"
	NON_TAXABLE_BROKERAGE_ACCOUNT InvestmentAccountSubtype = "non-taxable brokerage account"
	OTHER InvestmentAccountSubtype = "other"
	OTHER_ANNUITY InvestmentAccountSubtype = "other annuity"
	OTHER_INSURANCE InvestmentAccountSubtype = "other insurance"
	PERSON InvestmentAccountSubtype = "person"
	PRIF InvestmentAccountSubtype = "prif"
	PROFIT_SHARING_PLAN InvestmentAccountSubtype = "profit sharing plan"
	QSHR InvestmentAccountSubtype = "qshr"
	RDSP InvestmentAccountSubtype = "rdsp"
	RESP InvestmentAccountSubtype = "resp"
	RETIREMENT InvestmentAccountSubtype = "retirement"
	RLIF InvestmentAccountSubtype = "rlif"
	ROTH InvestmentAccountSubtype = "roth"
	ROTH_401K InvestmentAccountSubtype = "roth 401k"
	RRIF InvestmentAccountSubtype = "rrif"
	RRSP InvestmentAccountSubtype = "rrsp"
	SARSEP InvestmentAccountSubtype = "sarsep"
	SEP_IRA InvestmentAccountSubtype = "sep ira"
	SIMPLE_IRA InvestmentAccountSubtype = "simple ira"
	SIPP InvestmentAccountSubtype = "sipp"
	STOCK_PLAN InvestmentAccountSubtype = "stock plan"
	TFSA InvestmentAccountSubtype = "tfsa"
	TRUST InvestmentAccountSubtype = "trust"
	UGMA InvestmentAccountSubtype = "ugma"
	UTMA InvestmentAccountSubtype = "utma"
	VARIABLE_ANNUITY InvestmentAccountSubtype = "variable annuity"
	ALL InvestmentAccountSubtype = "all"
)

// All allowed values of InvestmentAccountSubtype enum
var AllowedInvestmentAccountSubtypeEnumValues = []InvestmentAccountSubtype{
	"529",
	"401a",
	"401k",
	"403B",
	"457b",
	"brokerage",
	"cash isa",
	"education savings account",
	"fixed annuity",
	"gic",
	"health reimbursement arrangement",
	"hsa",
	"ira",
	"isa",
	"keogh",
	"lif",
	"life insurance",
	"lira",
	"lrif",
	"lrsp",
	"mutual fund",
	"non-taxable brokerage account",
	"other",
	"other annuity",
	"other insurance",
	"person",
	"prif",
	"profit sharing plan",
	"qshr",
	"rdsp",
	"resp",
	"retirement",
	"rlif",
	"roth",
	"roth 401k",
	"rrif",
	"rrsp",
	"sarsep",
	"sep ira",
	"simple ira",
	"sipp",
	"stock plan",
	"tfsa",
	"trust",
	"ugma",
	"utma",
	"variable annuity",
	"all",
}

func (v *InvestmentAccountSubtype) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := InvestmentAccountSubtype(value)
	for _, existing := range AllowedInvestmentAccountSubtypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid InvestmentAccountSubtype", value)
}

// NewInvestmentAccountSubtypeFromValue returns a pointer to a valid InvestmentAccountSubtype
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewInvestmentAccountSubtypeFromValue(v string) (*InvestmentAccountSubtype, error) {
	ev := InvestmentAccountSubtype(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for InvestmentAccountSubtype: valid values are %v", v, AllowedInvestmentAccountSubtypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v InvestmentAccountSubtype) IsValid() bool {
	for _, existing := range AllowedInvestmentAccountSubtypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to InvestmentAccountSubtype value
func (v InvestmentAccountSubtype) Ptr() *InvestmentAccountSubtype {
	return &v
}

type NullableInvestmentAccountSubtype struct {
	value *InvestmentAccountSubtype
	isSet bool
}

func (v NullableInvestmentAccountSubtype) Get() *InvestmentAccountSubtype {
	return v.value
}

func (v *NullableInvestmentAccountSubtype) Set(val *InvestmentAccountSubtype) {
	v.value = val
	v.isSet = true
}

func (v NullableInvestmentAccountSubtype) IsSet() bool {
	return v.isSet
}

func (v *NullableInvestmentAccountSubtype) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInvestmentAccountSubtype(val *InvestmentAccountSubtype) *NullableInvestmentAccountSubtype {
	return &NullableInvestmentAccountSubtype{value: val, isSet: true}
}

func (v NullableInvestmentAccountSubtype) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInvestmentAccountSubtype) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

