/*
The Plaid API

The Plaid REST API. Please see https://plaid.com/docs/api for more details.

API version: 2020-09-14_1.64.13
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// DepositoryAccountSubtype Valid account subtypes for depository accounts. For a list containing descriptions of each subtype, see [Account schemas](https://plaid.com/docs/api/accounts/#StandaloneAccountType-depository).
type DepositoryAccountSubtype string

// List of DepositoryAccountSubtype
const (
	CHECKING DepositoryAccountSubtype = "checking"
	SAVINGS DepositoryAccountSubtype = "savings"
	HSA DepositoryAccountSubtype = "hsa"
	CD DepositoryAccountSubtype = "cd"
	MONEY_MARKET DepositoryAccountSubtype = "money market"
	PAYPAL DepositoryAccountSubtype = "paypal"
	PREPAID DepositoryAccountSubtype = "prepaid"
	CASH_MANAGEMENT DepositoryAccountSubtype = "cash management"
	EBT DepositoryAccountSubtype = "ebt"
	ALL DepositoryAccountSubtype = "all"
)

// All allowed values of DepositoryAccountSubtype enum
var AllowedDepositoryAccountSubtypeEnumValues = []DepositoryAccountSubtype{
	"checking",
	"savings",
	"hsa",
	"cd",
	"money market",
	"paypal",
	"prepaid",
	"cash management",
	"ebt",
	"all",
}

func (v *DepositoryAccountSubtype) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DepositoryAccountSubtype(value)
	for _, existing := range AllowedDepositoryAccountSubtypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DepositoryAccountSubtype", value)
}

// NewDepositoryAccountSubtypeFromValue returns a pointer to a valid DepositoryAccountSubtype
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDepositoryAccountSubtypeFromValue(v string) (*DepositoryAccountSubtype, error) {
	ev := DepositoryAccountSubtype(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DepositoryAccountSubtype: valid values are %v", v, AllowedDepositoryAccountSubtypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DepositoryAccountSubtype) IsValid() bool {
	for _, existing := range AllowedDepositoryAccountSubtypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DepositoryAccountSubtype value
func (v DepositoryAccountSubtype) Ptr() *DepositoryAccountSubtype {
	return &v
}

type NullableDepositoryAccountSubtype struct {
	value *DepositoryAccountSubtype
	isSet bool
}

func (v NullableDepositoryAccountSubtype) Get() *DepositoryAccountSubtype {
	return v.value
}

func (v *NullableDepositoryAccountSubtype) Set(val *DepositoryAccountSubtype) {
	v.value = val
	v.isSet = true
}

func (v NullableDepositoryAccountSubtype) IsSet() bool {
	return v.isSet
}

func (v *NullableDepositoryAccountSubtype) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDepositoryAccountSubtype(val *DepositoryAccountSubtype) *NullableDepositoryAccountSubtype {
	return &NullableDepositoryAccountSubtype{value: val, isSet: true}
}

func (v NullableDepositoryAccountSubtype) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDepositoryAccountSubtype) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

